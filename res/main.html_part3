   for(var genomeIdx=0; genomeIdx<genomeNameArr.length; genomeIdx++) genomeNameIdxMap[genomeNameArr[genomeIdx]] = genomeIdx;
   console.log("genome info finish loading!");
   
   $(function() { $( "#cutoffSlider" ).slider({ value:1, min: 0, max: 1, step: 0.01, slide: function( event, ui ) { $( "#cutoffAmount" ).val( ui.value ); cutoff = ui.value; } }); });
   
   $("#listbox").jqxListBox({width: 290, height: 600, source: genomeNameArr, checkboxes: true, filterable: true});
		$("#listbox").on('checkChange', function (event) {
			var items = $("#listbox").jqxListBox('getCheckedItems');
			checkedGenomeIdxArr = []; checkedGenomeArr = [];
			$.each(items, function (index) { checkedGenomeIdxArr.push(this.index); checkedGenomeArr.push(this.label); });
			
			if(checkedGenomeIdxArr.length > 0) $("#okBtn").prop('disabled', false);
			else $("#okBtn").prop('disabled', true);
   });
   
   
	var minDist = 1, maxDist = 0, gap=0;
	for(var rowIdx=0; rowIdx<genomeMat.length; rowIdx++) 
	{
		for(var colIdx=0; colIdx<genomeMat[0].length; colIdx++)
		{
			if(genomeMat[rowIdx][colIdx]<minDist) minDist = genomeMat[rowIdx][colIdx];
			if(genomeMat[rowIdx][colIdx]>maxDist) maxDist = genomeMat[rowIdx][colIdx];
		}
	}
	minDist = Math.max(0,minDist-0.1); maxDist = Math.min(1,maxDist+0.1); gap = maxDist-minDist;
	var colorScale = d3.scale.quantile().domain([minDist,maxDist]).range(colors);
	
	
	console.log("container-id-1 width: " + $("#container-id-1").width());
	console.log("dashboard width: " + $("#dashboard").width());
	console.log("vizcontainer width: " + $("#vizcontainer").width());
	
	containerWidth = $("#container-id-1").width()-$("#dashboard").width()-100;
	$("#vizcontainer").css("width", containerWidth);

	function updateData() {
		
		edgeData =[];
		for(var rowIdx=0; rowIdx<checkedGenomeIdxArr.length; rowIdx++) {
			for(var colIdx=0; colIdx<checkedGenomeIdxArr.length; colIdx++) {
				
				edgeData.push({"row":rowIdx, "col":colIdx, 
				"value":genomeMat[checkedGenomeIdxArr[rowIdx]][checkedGenomeIdxArr[colIdx]]<=cutoff?genomeMat[checkedGenomeIdxArr[rowIdx]][checkedGenomeIdxArr[colIdx]]:1});
				
			}
		}
	
		var cellSize = 25, legendElementWidth = cellSize*2, 
			width = Math.max(checkedGenomeIdxArr.length*cellSize, containerWidth ), height = Math.max(checkedGenomeIdxArr.length*cellSize, 1000 );
		
		
		d3.selectAll(".canvasSvg").remove(); 
		var svg = d3.select("#heatCanvas").style("float", "left").attr("width", width).attr("height", height)
			.append("g").attr('class', "canvasSvg").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
			
		var rowLabels = svg.append("g").selectAll(".rowLabelg").data(checkedGenomeArr).enter().append("text")
			.text(function (d) { return d; }).attr("x", 0).attr("y", function (d, i) { return i * cellSize; })
      		.style("text-anchor", "end").attr("transform", "translate(-6," + cellSize / 1.5 + ")")
      		.attr("class", function (d,i) { return "rowLabel mono r"+i;} ) ;
      		
      	var colLabels = svg.append("g").selectAll(".colLabelg").data(checkedGenomeArr).enter().append("text")
      		.text(function (d) { return d; }).attr("x", 0).attr("y", function (d, i) { return i * cellSize; })
      		.style("text-anchor", "left").attr("transform", "translate("+cellSize/2 + ",-6) rotate (-90)")
      		.attr("class",  function (d,i) { return "colLabel mono c"+i;} );
      	
      	var heatMap = svg.append("g").attr("class","g3").selectAll(".cellg").data(edgeData).enter().append("rect")
			.attr("x", function(d) { return d.col * cellSize; }).attr("y", function(d) { return d.row * cellSize; })
        	.attr("class", function(d){return "cell cell-border cr"+(d.row)+" cc"+(d.col);})
        	.attr("width", cellSize).attr("height", cellSize).style("fill", function(d) { return colorScale(d.value); })
			.on("mouseover", function(d){
				d3.selectAll(".cell").filter(function(el) {return d.row == el.row || d.col == el.col; }).classed("cell-hover",true);
				d3.selectAll(".rowLabel").classed("text-highlight",function(r,ri){ return ri==d.row;});
				d3.selectAll(".colLabel").classed("text-highlight",function(c,ci){ return ci==d.col;});
				
				d3.select("#tooltip1").style("left", (d3.event.pageX+10) + "px").style("top", (d3.event.pageY-10) + "px")
					.html("distance:"+d.value);  
                d3.select("#tooltip1").classed("hidden", false);
			})
			.on("mouseout", function(d){
				d3.selectAll(".cell").filter(function(el) {return d.row == el.row || d.col == el.col; }).classed("cell-hover",false);
				d3.selectAll(".rowLabel").classed("text-highlight",false);
				d3.selectAll(".colLabel").classed("text-highlight",false);
				d3.select("#tooltip1").classed("hidden", true);
			});
      		
      	var legend = svg.selectAll(".legend").data([minDist,minDist+0.1*gap,minDist+0.2*gap,minDist+0.3*gap,minDist+0.4*gap,minDist+0.5*gap,minDist+0.6*gap,minDist+0.7*gap,minDist+0.8*gap,minDist+0.9*gap,maxDist]).enter().append("g").attr("class", "legend");
		legend.append("rect").attr("x", function(d, i) { return legendElementWidth * i-margin.left; }).attr("y", (cellSize*2) - margin.top)
    		.attr("width", legendElementWidth).attr("height", cellSize)
    		.style("fill", function(d, i) { return colors[i]; });
    
    	legend.append("text").text(function(d) { return d3.format(".2f")(d); }).style("text-anchor", "left")
    		.attr("x", function(d, i) { return legendElementWidth * i-margin.left; }).attr("y", (cellSize*4)- margin.top);
	}
	
	

</script>

</body>
</html>